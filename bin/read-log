#!/usr/bin/env ruby
require 'log/parser'
Log::Parser.create_log_file
dir = File.join(Dir.home, '.log-parser')
config = File.join(dir, '.read-config')
case ARGV[0]
  when 'quit'
    pid = IO.read(File.join(dir, 'logstash.pid'))
    Process.kill(9, pid.to_i)
    puts 'logstash killed.'
    exit(0)
  when 'reset'
    FileUtils.rm File.join(dir, '.line'), force: true
    puts 'Parsing log file from beginning'
    exit(0)
  when 'config'
    IO.write(config, ARGV[1])
    puts 'config file written.'
    exit(0)
end

quickstart = File.join(dir, 'quickstart.conf')
quistart_content = <<-EOD
input {
  file {
    type => "rails logs"
    path => "#{File.join(dir, 'logstash.log')}"
    codec =>   json {
      charset => "UTF-8"
    }
  }
}

filter {
 if [fields][ip] {
    geoip {
       source => "[@fields][ip]"
       target => "geoip"
       add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
       add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
  }
  mutate {
    convert => [ "[geoip][coordinates]", "float" ]
  }
  }
}

output {
  # Print each event to stdout.
  stdout {
    codec => rubydebug
  }

  elasticsearch {
    embedded => true
  }
}

EOD

IO.write(quickstart, quistart_content)
if ARGV.empty?
  logstash = IO.read(config)
else
  logstash = ARGV[0]
end
puts 'Copy and execute this line:'
puts "JAVA_OPTS=-Des.path.data=\"#{dir}\" #{logstash} agent -f #{quickstart} -- web & echo $! > #{File.join(dir, 'logstash.pid')}"
puts 'and run fetch-log'
puts 'run read-log quit to quit logstash'
puts 'run read-log reset to parse the log file from beginning'
